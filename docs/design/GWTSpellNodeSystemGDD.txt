# Grand Wizard Tournament: Spell Node System Design Document

## Table of Contents
1. [Introduction](#introduction)
2. [Core Node System Architecture](#core-node-system-architecture)
3. [Node Types and Functionality](#node-types-and-functionality)
4. [Rarity Framework](#rarity-framework)
5. [Visual Design Guidelines](#visual-design-guidelines)
6. [Spell Creation Interface](#spell-creation-interface)
7. [Educational Integration](#educational-integration)
8. [Progression and Unlock System](#progression-and-unlock-system)
9. [Balance Considerations](#balance-considerations)
10. [Implementation Guidelines](#implementation-guidelines)

## Introduction

Grand Wizard Tournament is an educational roguelike game that teaches programming concepts through an engaging magical combat system. Players navigate a procedurally generated labyrinth, fighting waves of enemies while learning fundamental programming concepts through an intuitive spell-crafting system called "The Grimoire."

The spell node system is the core educational and gameplay mechanic, transforming abstract programming concepts into tangible magical components that players collect, combine, and master. This document details the comprehensive design of the node system, including its architecture, functionality, progression mechanics, and educational integration.

**Core Game Loop:**
1. Navigate procedurally generated rooms
2. Collect spell components (nodes) and items
3. Craft and modify spells using visual programming
4. Complete wave-specific objectives
5. Progress through increasingly challenging waves
6. Compete for high scores and rankings

**Educational Goals:**
- Teach basic programming concepts through gameplay
- Introduce computational thinking patterns
- Build problem-solving skills
- Create an engaging learning experience that doesn't feel educational

## Core Node System Architecture

### Foundational Principles

The node system is built on three core principles that ensure both educational value and engaging gameplay:

1. **Node Categories**: All spell components fall into six fundamental types that map directly to programming concepts:
   - **Magic Nodes**: Core spell functionality (Primary functions)
   - **Trigger Nodes**: Event detection (Event handlers)
   - **Effect Nodes**: Result production (Output/actions)
   - **Condition Nodes**: Branch control (Conditional logic)
   - **Variable Nodes**: Data management (Variables/state)
   - **Flow Nodes**: Execution control (Loops/control flow)

2. **Connection System**: Nodes connect through a directed graph system with:
   - **Input Ports**: Accept incoming connections with defined data types
   - **Output Ports**: Send signals or data to connected nodes
   - **Port Compatibility**: Enforces logical connection rules between node types

3. **Execution Model**: Spells execute through a signal propagation system:
   - Signal flow begins at Trigger nodes
   - Travels through the connected node graph
   - Follows conditional branches based on runtime evaluation
   - Allows for parallel execution paths

### Technical Implementation

```cpp
// Core interface for all node types
class UGWTSpellNode : public UObject
{
    GENERATED_BODY()

public:
    // Node identity properties
    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Node")
    FGuid NodeID;

    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Node")
    FText NodeTitle;

    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Node")
    FText NodeDescription;

    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Node")
    FText NodeCategory;

    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Node")
    FLinearColor NodeColor;

    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = "Node")
    EGWTItemRarity NodeRarity = EGWTItemRarity::Common;
    
    // Node connections
    UPROPERTY()
    TArray<UGWTSpellNode*> InputNodes;

    UPROPERTY()
    TArray<UGWTSpellNode*> OutputNodes;
    
    // Node position in editor
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Editor")
    FVector2D NodePosition;
    
    // Execution methods
    UFUNCTION(BlueprintCallable, Category = "Execution")
    virtual void Execute(UGWTSpellExecutionContext* Context);
    
    // Returns available input/output ports with type information
    UFUNCTION(BlueprintCallable, Category = "Connections")
    virtual TArray<FGWTPortDescriptor> GetInputPorts() const;
    
    UFUNCTION(BlueprintCallable, Category = "Connections")
    virtual TArray<FGWTPortDescriptor> GetOutputPorts() const;
    
    // Connection methods
    UFUNCTION(BlueprintCallable, Category = "Connections")
    virtual bool CanConnectInput(UGWTSpellNode* Node);

    UFUNCTION(BlueprintCallable, Category = "Connections")
    virtual bool CanConnectOutput(UGWTSpellNode* Node);

    UFUNCTION(BlueprintCallable, Category = "Connections")
    virtual void AddInputConnection(UGWTSpellNode* Node);

    UFUNCTION(BlueprintCallable, Category = "Connections")
    virtual void AddOutputConnection(UGWTSpellNode* Node);
    
    // Utility methods
    UFUNCTION(BlueprintCallable, Category = "Utility")
    virtual EGWTSpellComponentType GetNodeType() const;
    
    // Get scaling factor based on rarity
    UFUNCTION(BlueprintCallable, Category = "Rarity")
    float GetRarityScaleFactor() const;
};
```

## Node Types and Functionality

### 1. Magic Nodes

Magic nodes represent the core spell effects and serve as the primary "function" of a spell.

#### Core Functionality
- Define the base spell effect (fire, ice, lightning, etc.)
- Determine damage values and element types
- Control spell range and area of effect
- Manage mana costs and cast times

#### Input/Output Specifications

**Input Ports:**
- Element Modifier: Changes the spell's element
- Power Amplifier: Increases damage/healing
- Target Selector: Overrides default targeting
- Duration Modifier: Adjusts effect duration

**Output Ports:**
- Damage Event: Signals when damage is dealt
- Status Applied: Signals when a status effect is applied
- Spell Completion: Signals the end of the spell effect
- Target Reference: Outputs the affected target(s)

#### Educational Concepts
- Function calls
- Function parameters
- Return values
- Types and type conversion

#### Example: Fire Magic Node
```cpp
void UGWTFireMagicNode::Execute(UGWTSpellExecutionContext* Context)
{
    // Get target
    AActor* Target = Context->Target;
    if (!Target) return;
    
    // Apply damage with fire element
    float Damage = BaseDamage * GetRarityScaleFactor();
    UGWTDamageSystem::ApplyDamage(Target, Damage, EGWTElementType::Fire, Context->Caster);
    
    // Apply burning status effect
    FGWTStatusEffect BurningEffect;
    BurningEffect.EffectType = EGWTStatusEffectType::Burning;
    BurningEffect.Duration = 5.0f;
    BurningEffect.Strength = Damage * 0.2f; // DoT is 20% of initial damage per second
    BurningEffect.Causer = Context->Caster;
    
    UGWTStatusSystem::ApplyStatusEffect(Target, BurningEffect);
    
    // Trigger output connections
    for (UGWTSpellNode* OutputNode : OutputNodes)
    {
        if (OutputNode)
        {
            OutputNode->Execute(Context);
        }
    }
}
```

### 2. Trigger Nodes

Trigger nodes determine when spells activate, functioning as event handlers in programming.

#### Core Functionality
- Define conditions for spell activation
- React to game events (hits, health thresholds, etc.)
- Control spell timing and responsiveness
- Manage cooldowns and charge systems

#### Input/Output Specifications

**Input Ports:**
- Condition Modifier: Additional requirements for activation
- Cooldown Modifier: Adjusts cooldown time
- Event Source: Filters trigger sources

**Output Ports:**
- Activation Signal: Primary output triggering connected nodes
- Cooldown Started: Signals when the trigger enters cooldown
- Cooldown Ended: Signals when the trigger is ready again
- Event Data: Outputs contextual data about the trigger

#### Educational Concepts
- Event handling
- Event listeners
- Callbacks
- Timing and delays

#### Example: OnHit Trigger Node
```cpp
void UGWTOnHitTriggerNode::CheckForTrigger(UGWTSpellExecutionContext* Context)
{
    // Check if on cooldown
    if (IsOnCooldown()) return;
    
    // Simple hit detection
    if (Context->HitResult.GetActor())
    {
        // Create context with hit information
        Context->SetVariable(FName("HitActor"), FGWTVariableValue::FromActor(Context->HitResult.GetActor()));
        Context->SetVariable(FName("HitLocation"), FGWTVariableValue::FromVector(Context->HitResult.Location));
        
        // Execute connected nodes
        for (UGWTSpellNode* OutputNode : OutputNodes)
        {
            if (OutputNode)
            {
                OutputNode->Execute(Context);
            }
        }
        
        // Set cooldown based on rarity
        float CooldownTime = BaseCooldown / GetRarityScaleFactor();
        StartCooldown(CooldownTime);
    }
}
```

### 3. Effect Nodes

Effect nodes produce specific outcomes like damage, healing, or environmental effects.

#### Core Functionality
- Apply specific effects to targets
- Create status effects and persistent zones
- Generate visual and audio effects
- Control effect duration and intensity

#### Input/Output Specifications

**Input Ports:**
- Effect Modifier: Changes effect parameters
- Targeting Data: Location or actor references
- Strength Modifier: Adjusts effect power
- Duration Modifier: Adjusts effect duration

**Output Ports:**
- Effect Applied: Signals successful application
- Effect Complete: Signals when duration ends
- Affected Targets: References to all affected targets
- Effect Data: Data about the applied effect

#### Educational Concepts
- Function side effects
- State changes
- Output formatting
- Data persistence

#### Example: Burning Effect Node
```cpp
void UGWTBurningEffectNode::Execute(UGWTSpellExecutionContext* Context)
{
    // Get target
    AActor* Target = Context->Target;
    if (!Target) return;
    
    // Create burning status effect with rarity scaling
    FGWTStatusEffect BurningEffect;
    BurningEffect.EffectType = EGWTStatusEffectType::Burning;
    BurningEffect.Strength = BaseStrength * GetRarityScaleFactor();
    BurningEffect.Duration = BaseDuration;
    BurningEffect.Causer = Context->Caster;
    
    // Apply effect
    UGWTStatusSystem::ApplyStatusEffect(Target, BurningEffect);
    
    // Create persistent zone at Epic+ rarity
    if (NodeRarity >= EGWTItemRarity::Epic)
    {
        FVector ZoneLocation = Target->GetActorLocation();
        float ZoneRadius = 300.0f;
        float ZoneDuration = 15.0f;
        
        UGWTZoneSystem::CreateEffectZone(
            Context->Caster, 
            ZoneLocation,
            ZoneRadius,
            ZoneDuration,
            BurningEffect);
    }
    
    // Execute connected nodes
    for (UGWTSpellNode* OutputNode : OutputNodes)
    {
        if (OutputNode)
        {
            OutputNode->Execute(Context);
        }
    }
}
```

### 4. Condition Nodes

Condition nodes create branching logic based on specific checks.

#### Core Functionality
- Evaluate conditions and direct spell flow
- Compare values and states
- Create branching paths in spells
- Handle complex logical operations

#### Input/Output Specifications

**Input Ports:**
- Condition Value: Data to be evaluated
- Comparison Value: Data to compare against
- Condition Type: Defines comparison type

**Output Ports:**
- True Path: Activated when condition is true
- False Path: Activated when condition is false
- Condition Result: Outputs the boolean result
- Evaluation Data: Additional data about the evaluation

#### Educational Concepts
- If-then-else logic
- Boolean operations
- Comparison operators
- Decision trees

#### Example: Health Check Condition Node
```cpp
void UGWTHealthCheckNode::Execute(UGWTSpellExecutionContext* Context)
{
    // Get target
    AActor* Target = Context->Target;
    if (!Target) return;
    
    // Get health percentage
    UGWTHealthComponent* HealthComp = UGWTHealthComponent::GetFrom(Target);
    if (!HealthComp) return;
    
    float HealthPercentage = HealthComp->GetHealthPercentage() * 100.0f;
    
    // Evaluate condition
    bool bConditionResult = (HealthPercentage <= ComparisonValue);
    
    // Store result in context
    Context->SetVariable(FName("ConditionResult"), FGWTVariableValue::FromBool(bConditionResult));
    
    // Execute appropriate path
    if (bConditionResult && TruePathNode)
    {
        TruePathNode->Execute(Context);
    }
    else if (!bConditionResult && FalsePathNode)
    {
        FalsePathNode->Execute(Context);
    }
    
    // At Legendary rarity, execute BOTH paths with reduced power
    if (NodeRarity == EGWTItemRarity::Legendary)
    {
        UGWTSpellExecutionContext* SecondaryContext = DuplicateContext(Context);
        SecondaryContext->SetVariable(FName("SecondaryPathPower"), FGWTVariableValue::FromFloat(0.5f));
        
        if (bConditionResult && FalsePathNode)
        {
            FalsePathNode->Execute(SecondaryContext);
        }
        else if (!bConditionResult && TruePathNode)
        {
            TruePathNode->Execute(SecondaryContext);
        }
    }
}
```

### 5. Variable Nodes

Variable nodes store and manipulate data values.

#### Core Functionality
- Store and retrieve data values
- Perform mathematical operations
- Track changes in values
- Create and manage data persistence

#### Input/Output Specifications

**Input Ports:**
- Value Source: Data to store or modify
- Operation Type: Math operations
- Operation Value: Second operand for operations

**Output Ports:**
- Current Value: The variable's current value
- Value Changed: Signals when the value changes
- Change Amount: Delta between old and new value
- History: Historical values (higher rarities only)

#### Educational Concepts
- Variables and data types
- Basic arithmetic operations
- Memory and state management
- Data structures

#### Example: Float Variable Node
```cpp
void UGWTFloatVariableNode::Execute(UGWTSpellExecutionContext* Context)
{
    // Get current value or create if doesn't exist
    FGWTVariableValue CurrentValue;
    if (Context->HasVariable(VariableName))
    {
        CurrentValue = Context->GetVariable(VariableName);
    }
    else
    {
        // Initialize with default value
        CurrentValue.Type = EGWTVariableType::Float;
        CurrentValue.FloatValue = DefaultValue;
    }
    
    // Store old value for change tracking
    float OldValue = CurrentValue.FloatValue;
    
    // Get operation value from input or default
    float OperationValue = GetOperationValue(Context).FloatValue;
    
    // Apply operation
    switch (Operation)
    {
        case EVariableOperation::Read:
            // No change
            break;
            
        case EVariableOperation::Write:
            CurrentValue.FloatValue = OperationValue;
            break;
            
        case EVariableOperation::Add:
            CurrentValue.FloatValue += OperationValue;
            break;
            
        case EVariableOperation::Subtract:
            CurrentValue.FloatValue -= OperationValue;
            break;
            
        case EVariableOperation::Multiply:
            CurrentValue.FloatValue *= OperationValue;
            break;
            
        case EVariableOperation::Divide:
            if (OperationValue != 0.0f)
            {
                CurrentValue.FloatValue /= OperationValue;
            }
            break;
    }
    
    // Update variable in context
    Context->SetVariable(VariableName, CurrentValue);
    
    // Track history at Rare+ rarity
    if (NodeRarity >= EGWTItemRarity::Rare)
    {
        UpdateHistory(Context, OldValue);
    }
    
    // Memory persistence at Legendary rarity
    if (NodeRarity == EGWTItemRarity::Legendary && bMemoryEnabled)
    {
        PersistentValue = CurrentValue;
    }
    
    // Execute connected nodes
    for (UGWTSpellNode* OutputNode : OutputNodes)
    {
        if (OutputNode)
        {
            OutputNode->Execute(Context);
        }
    }
}
```

### 6. Flow Nodes

Flow nodes control execution sequence with loops and delays.

#### Core Functionality
- Control the flow of execution
- Create loops and iterations
- Manage timing and delays
- Enable parallel execution paths

#### Input/Output Specifications

**Input Ports:**
- Iteration Count: Number of loop iterations
- Loop Condition: Boolean for while loops
- Delay Duration: Timing for delayed execution

**Output Ports:**
- Loop Body: Main execution path for the loop
- Loop Completed: Signals when all iterations finish
- Iteration Index: Current iteration number
- Iteration Data: Contextual data about the iteration

#### Educational Concepts
- Loops (for, while)
- Iteration and sequence
- Time management in code
- Parallel vs. sequential execution

#### Example: Repeat Flow Node
```cpp
void UGWTRepeatFlowNode::Execute(UGWTSpellExecutionContext* Context)
{
    // Get iteration count (scales with rarity)
    int32 MaxIterations = GetMaxIterationsByRarity();
    int32 Count = FMath::Min(MaxIterations, IterationCount);
    
    // Execute the body node for each iteration
    for (int32 i = 0; i < Count; i++)
    {
        // Set iteration index in context
        Context->SetVariable(FName("IterationIndex"), FGWTVariableValue::FromInt(i));
        
        // Execute the body
        if (BodyNode)
        {
            BodyNode->Execute(Context);
        }
        
        // At Epic+ rarity, allow adjusting iteration count mid-execution
        if (NodeRarity >= EGWTItemRarity::Epic)
        {
            if (Context->HasVariable(FName("AdjustedIterationCount")))
            {
                FGWTVariableValue AdjustedCount = Context->GetVariable(FName("AdjustedIterationCount"));
                if (AdjustedCount.Type == EGWTVariableType::Int)
                {
                    Count = FMath::Min(MaxIterations, AdjustedCount.IntValue);
                }
            }
        }
    }
    
    // Signal completion
    Context->SetVariable(FName("LoopCompleted"), FGWTVariableValue::FromBool(true));
    Context->SetVariable(FName("IterationCount"), FGWTVariableValue::FromInt(Count));
    
    // Execute connected nodes after loop completes
    for (UGWTSpellNode* OutputNode : OutputNodes)
    {
        if (OutputNode != BodyNode)
        {
            OutputNode->Execute(Context);
        }
    }
}

int32 UGWTRepeatFlowNode::GetMaxIterationsByRarity() const
{
    switch (NodeRarity)
    {
        case EGWTItemRarity::Common:
            return 3;
        case EGWTItemRarity::Uncommon:
            return 5;
        case EGWTItemRarity::Rare:
            return 10;
        case EGWTItemRarity::Epic:
            return 20;
        case EGWTItemRarity::Legendary:
            return 50;
        default:
            return 3;
    }
}
```

## Rarity Framework

The node system utilizes five rarity tiers that progressively unlock greater capabilities, creating both gameplay progression and educational scaffolding.

### Rarity Tiers

| Rarity | Visual Indicator | Connection Capacity | Effect Scaling | Unique Capabilities |
|--------|-----------------|---------------------|----------------|---------------------|
| Common | White glow | 1-2 connections | 100% (base) | Standard functionality |
| Uncommon | Green glow | 2-3 connections | 125% | Quality-of-life improvements |
| Rare | Blue glow | 3-4 connections | 150% | Enhanced functional capabilities |
| Epic | Purple glow | 4-5 connections | 200% | Multiple advanced features |
| Legendary | Orange/gold glow | 5-6 connections | 250% | Unique game-changing abilities |

### Rarity-Specific Capabilities

Each node type gains additional capabilities at higher rarities:

#### Magic Nodes
- **Common**: Single target, basic damage
- **Uncommon**: Increased damage, small AoE
- **Rare**: Element combinations, status effects
- **Epic**: Multi-targeting, persistent effects
- **Legendary**: Dual-element casting, environment alteration

#### Trigger Nodes
- **Common**: Basic triggers with long cooldowns
- **Uncommon**: Reduced cooldowns, basic filtering
- **Rare**: Charge-based system (2-3 charges)
- **Epic**: Complex event detection, short cooldowns
- **Legendary**: No cooldowns, predictive triggering

#### Effect Nodes
- **Common**: Basic effects with fixed parameters
- **Uncommon**: Stronger effects, minor parameter control
- **Rare**: Effect combinations, increased duration
- **Epic**: Persistent effect zones, chaining effects
- **Legendary**: Global effects, environment transformation

#### Condition Nodes
- **Common**: Simple if-then branching
- **Uncommon**: If-else branching with enhanced comparison
- **Rare**: Multiple condition evaluation, AND/OR logic
- **Epic**: Complex condition trees, dynamic evaluation
- **Legendary**: Quantum conditioning (both paths execute)

#### Variable Nodes
- **Common**: Basic variable storage (read/write)
- **Uncommon**: Mathematical operations
- **Rare**: Variable history tracking (last 3 values)
- **Epic**: Complex data structures, arrays
- **Legendary**: Persistent memory across spell casts

#### Flow Nodes
- **Common**: Limited iterations (max 3)
- **Uncommon**: More iterations (max 5), basic control
- **Rare**: Advanced iterations (max 10), nested loops
- **Epic**: Many iterations (max 20), dynamic iteration control
- **Legendary**: Unlimited iterations, parallel execution paths

### Acquisition Methods

Nodes can be acquired through multiple gameplay systems:

1. **Exploration Rewards**: Hidden in treasure chests throughout the labyrinth
2. **Enemy Drops**: Defeated enemies occasionally drop nodes
3. **Shop Purchases**: Special vendors sell nodes of varying rarities
4. **Crafting**: Combine similar nodes to upgrade to higher rarities
5. **Achievement Rewards**: Completing educational milestones unlocks guaranteed nodes
6. **Wave Completion**: End-of-wave rewards include nodes appropriate to player progress

### Crafting System

The crafting system allows players to upgrade nodes to higher rarities:

- **Upgrade Formula**:
  - 3 Common nodes → 1 Uncommon node
  - 4 Uncommon nodes → 1 Rare node
  - 5 Rare nodes → 1 Epic node
  - 5 Epic nodes + special materials → 1 Legendary node

- **Special Materials**:
  - **Essence of Knowledge**: Earned by completing educational challenges
  - **Arcane Crystals**: Found in secret areas of the labyrinth
  - **Wizard's Dust**: Obtained by salvaging unwanted nodes
  - **Boss Fragments**: Dropped by wave bosses

## Visual Design Guidelines

The visual design of nodes serves both aesthetic and functional purposes, helping players intuitively understand node functions and interactions.

### Node Appearance

1. **Base Appearance**: All nodes share a common base design with:
   - Hexagonal or octagonal shape
   - Input ports on left side
   - Output ports on right side
   - Title displayed prominently
   - Icon representing function

2. **Rarity Visualization**:
   - **Common**: Plain white borders, simple visual effects
   - **Uncommon**: Green borders with subtle pulsing
   - **Rare**: Blue borders with gentle particle effects
   - **Epic**: Purple borders with pronounced particle effects and slight glow
   - **Legendary**: Golden/orange borders with dramatic particle effects and pronounced glow

3. **Type Distinction**:
   - **Magic Nodes**: Predominantly red color scheme
   - **Trigger Nodes**: Predominantly green color scheme
   - **Effect Nodes**: Predominantly blue color scheme
   - **Condition Nodes**: Predominantly yellow color scheme
   - **Variable Nodes**: Predominantly purple color scheme
   - **Flow Nodes**: Predominantly cyan color scheme

### Connection Visualization

1. **Connection Lines**: 
   - Animated flowing energy along connection lines
   - Color reflects the node type that originated the connection
   - Thickness indicates connection importance/power
   - Invalid connections show as red dashed lines

2. **Port Visualization**:
   - Input ports are inward-facing triangles/arrows
   - Output ports are outward-facing triangles/arrows
   - Port color indicates accepted/produced data type
   - Port size scales with rarity (higher rarity = more/larger ports)
   - Hover effect shows compatible connection nodes

3. **Execution Visualization**:
   - Active flow highlighted during spell casting
   - Pulsing animation along active connection paths
   - Visual feedback when conditionals branch
   - Error states with distinctive visual treatment

## Spell Creation Interface

The spell creation interface, known as "The Grimoire," is where players build and modify their spells using the node system.

### Interface Elements

1. **Node Palette**: 
   - Displays all available node types
   - Organized by category (Magic, Trigger, etc.)
   - Shows owned nodes with their rarities
   - Filters by type, rarity, and recently acquired

2. **Canvas Workspace**:
   - Central area for placing and connecting nodes
   - Grid background with snap functionality
   - Zoom and pan controls
   - Mini-map for large spell navigation

3. **Properties Panel**:
   - Shows detailed information for selected node
   - Allows adjustment of node parameters
   - Displays connection requirements and limitations
   - Shows educational concept information

4. **Spell Overview**:
   - Displays spell name and description
   - Shows calculated spell statistics (damage, mana cost, etc.)
   - Visual indicator of spell complexity
   - Save, load, and test controls

### Interaction Flow

1. **Node Placement**:
   - Drag nodes from palette to canvas
   - Nodes snap to grid for organization
   - Right-click for quick placement menu
   - Node count limited by player level

2. **Node Connection**:
   - Click and drag from output port to input port
   - Compatible ports highlight when hovering
   - Incompatible connections rejected with visual feedback
   - Connection visualization varies based on data type

3. **Node Configuration**:
   - Select node to edit properties
   - Numeric sliders for value adjustment
   - Dropdown menus for discrete options
   - Color pickers for visual customization

4. **Testing and Debugging**:
   - "Test Cast" button simulates spell execution
   - Step-by-step execution mode for learning
   - Visual highlighting of current execution path
   - Error messages for invalid configurations

## Educational Integration

The node system is designed to teach programming concepts organically through gameplay, with each node type and interaction mapping to fundamental programming principles.

### Mapped Programming Concepts

Each node type and rarity introduces specific programming concepts:

1. **Magic Nodes**:
   - **Common**: Basic function calls
   - **Uncommon**: Function parameters
   - **Rare**: Return values
   - **Epic**: Multiple return values
   - **Legendary**: Polymorphism

2. **Trigger Nodes**:
   - **Common**: Event handling
   - **Uncommon**: Event filtering
   - **Rare**: Event propagation
   - **Epic**: Event prioritization
   - **Legendary**: Complex event patterns

3. **Effect Nodes**:
   - **Common**: Basic output
   - **Uncommon**: Output formatting
   - **Rare**: Multiple outputs
   - **Epic**: Chained outputs
   - **Legendary**: Persistent effects (state)

4. **Condition Nodes**:
   - **Common**: If-then logic
   - **Uncommon**: If-else logic
   - **Rare**: Complex boolean operations
   - **Epic**: Switch statements
   - **Legendary**: Quantum computing concepts

5. **Variable Nodes**:
   - **Common**: Basic variables
   - **Uncommon**: Variable operations
   - **Rare**: Variable history/arrays
   - **Epic**: Advanced data structures
   - **Legendary**: Persistent storage/databases

6. **Flow Nodes**:
   - **Common**: Basic loops
   - **Uncommon**: Loop control
   - **Rare**: Nested loops
   - **Epic**: Advanced flow control
   - **Legendary**: Parallel processing

### Learning Integration

1. **Concept Discovery**:
   - Each node has an associated programming concept
   - Using a node adds its concept to the player's "knowledge tree"
   - Tooltips explain programming concepts in simple terms
   - Examples show real-world code equivalents

2. **Guided Learning**:
   - Tutorial quests introduce basic node combinations
   - Challenges target specific programming concepts
   - Hint system suggests optimal node combinations
   - "Code view" shows equivalent pseudocode for created spells

3. **Adaptive Difficulty**:
   - Game analyzes player's understanding of concepts
   - Suggests new challenges based on learning gaps
   - Adjusts enemy behaviors to encourage specific spell patterns
   - Rewards experimentation and optimization

4. **Educational Tracking**:
   - Background system monitors concept mastery
   - Tracks usage patterns of different node types
   - Measures complexity of created spells
   - Identifies areas for guided improvement

## Progression and Unlock System

The progression system ties educational advancement to gameplay rewards, creating a compelling motivation to learn and experiment with programming concepts.

### Player Level Integration

1. **Base Unlocks by Level**:
   - Level 1-5: Common nodes of all types
   - Level 6-10: Uncommon nodes
   - Level 11-15: Rare nodes
   - Level 16-20: Epic nodes
   - Level 21+: Legendary nodes

2. **Specialized Node Unlocks**:
   - Combat achievements unlock combat-focused nodes
   - Exploration achievements unlock utility nodes
   - Educational achievements unlock complex logic nodes

### Tower Progression System

The "Wizard's Tower" serves as a visual representation of player progress:

1. **Apprentice Floors (1-5)**:
   - Focus on basic nodes and simple combinations
   - Guided tutorials for core programming concepts
   - Enemies vulnerable to basic spell patterns

2. **Journeyman Floors (6-15)**:
   - Introduction of Uncommon and Rare nodes
   - Challenges requiring conditional logic
   - Enemies with resistance to basic spells

3. **Master Floors (16-25)**:
   - Epic node availability
   - Puzzles requiring complex variable manipulation
   - Enemies requiring strategic spell combinations

4. **Archmage Floors (26+)**:
   - Legendary node discovery
   - Challenges requiring optimization
   - Enemies with adaptive defenses requiring creative solutions

### Node Discovery System

1. **Node Journal**:
   - Automatically records discovered nodes
   - Shows known rarities for each node type
   - Tracks educational concepts mastered
   - Provides hints for undiscovered rarities

2. **Research System**:
   - Spend in-game resources to research node upgrades
   - Conduct experiments to discover new node properties
   - Complete educational challenges to unlock advanced nodes

## Balance Considerations

### Power vs. Complexity Balance

1. **Resource Constraints**:
   - Higher rarity nodes have increased mana costs
   - More complex spells have longer casting times
   - Limited node slots in spells based on player level
   - Connection capacity limits based on player skill

2. **Risk vs. Reward**:
   - More powerful nodes have drawbacks/limitations
   - Complex combinations offer greater rewards but more failure points
   - Legendary nodes have situational optimality
   - Different rarities have distinct use cases

3. **Progression Pacing**:
   - Carefully tuned drop rates for each rarity
   - Node unlocks aligned with player skill development
   - Smooth difficulty curve
   - "Breakthrough" moments with powerful combinations

### Spell Power Calculation

Spell power is determined by multiple factors:

1. **Node Contributions**:
   - Base power from Magic nodes
   - Multipliers from Effect nodes
   - Efficiency factors from Condition and Flow nodes
   - Scaling from Variable nodes

2. **Complexity Factors**:
   - Node count penalty after threshold (5+ nodes)
   - Connection efficiency bonuses for logical layouts
   - Loop optimization bonuses
   - Conditional branch balancing

3. **Rarity Impact**:
   - Higher rarity nodes contribute greater power
   - Matched rarity sets provide synergy bonuses
   - Mixed rarities offer versatility bonuses
   - Legendary nodes enable unique power mechanics

### Mana Economy

The mana system balances spell power:

1. **Base Costs**:
   - Each node has a base mana cost
   - Magic nodes have highest costs
   - Utility nodes have lower costs
   - Higher rarity increases costs

2. **Cost Modifiers**:
   - Spell complexity multiplier
   - Player level discount
   - Mastery bonuses for frequently used nodes
   - Equipment-based cost reduction

3. **Mana Management**:
   - Mana regeneration during combat
   - Mana potion consumables
   - Mana efficiency equipment
   - Mana-saving spell techniques

## Implementation Guidelines

### Performance Optimization

1. **Execution Optimization**:
   - Limit maximum nodes per spell based on device capability
   - Optimize execution order to minimize calculations
   - Cache intermediate results in complex node networks
   - Limit update frequency for expensive operations

2. **Visual Effect Management**:
   - Scale particle effects based on device performance
   - Prioritize gameplay-critical visuals
   - Use LOD system for node visualizations
   - Batch similar visual effects

3. **Memory Management**:
   - Pool common node instances
   - Lazy-load node descriptions and properties
   - Unload unused node assets during gameplay
   - Optimize save/load operations for node collections

### Code Structure Adaptations

```cpp
// Example of rarity-specific functionality
float UGWTSpellNode::GetRarityScaleFactor() const
{
    switch (NodeRarity)
    {
        case EGWTItemRarity::Common:
            return 1.0f;
        case EGWTItemRarity::Uncommon:
            return 1.25f;
        case EGWTItemRarity::Rare:
            return 1.5f;
        case EGWTItemRarity::Epic:
            return 2.0f;
        case EGWTItemRarity::Legendary:
            return 2.5f;
        default:
            return 1.0f;
    }
}

// Example of getting max connections based on rarity
int32 UGWTSpellNode::GetMaxInputConnections() const
{
    switch (NodeRarity)
    {
        case EGWTItemRarity::Common:
            return 1;
        case EGWTItemRarity::Uncommon:
            return 2;
        case EGWTItemRarity::Rare:
            return 3;
        case EGWTItemRarity::Epic:
            return 4;
        case EGWTItemRarity::Legendary:
            return 5;
        default:
            return 1;
    }
}

// Example of spell power calculation
float UGWTSpell::CalculateSpellPower() const
{
    float BasePower = 0.0f;
    
    // Sum base power from all Magic nodes
    for (UGWTSpellNode* Node : AllNodes)
    {
        if (UGWTMagicNode* MagicNode = Cast<UGWTMagicNode>(Node))
        {
            BasePower += MagicNode->BaseDamage * MagicNode->GetRarityScaleFactor();
        }
    }
    
    // Apply complexity factor
    float ComplexityFactor = 1.0f;
    if (AllNodes.Num() > 5)
    {
        // Penalty for overly complex spells
        ComplexityFactor = 1.0f - ((AllNodes.Num() - 5) * 0.05f);
        ComplexityFactor = FMath::Max(0.5f, ComplexityFactor); // Cap at 50% penalty
    }
    
    // Apply rarity bonus
    float RarityBonus = 1.0f;
    RarityBonus += (CalculateAverageRarity() * 0.1f);
    
    return BasePower * ComplexityFactor * RarityBonus;
}
```

### Testing Guidelines

1. **Educational Effectiveness Testing**:
   - Concept retention assessments
   - Solution approach analysis
   - Engagement metrics tracking
   - Difficulty progression evaluation

2. **Balance Testing**:
   - Node power comparative analysis
   - Rarity progression pacing
   - Enemy difficulty scaling
   - Mana economy balance

3. **Usability Testing**:
   - Interface clarity evaluation
   - Spell creation time tracking
   - Error rate monitoring
   - Learning curve smoothness

---

This comprehensive node system design transforms Grand Wizard Tournament into an engaging educational experience where players naturally learn programming concepts through magical spell creation. By integrating educational content with compelling gameplay mechanics, the system makes learning intuitive, rewarding, and fun.